---
- hosts: webserver
  remote_user: root
  tasks:
    - include_vars: ./secrets.yml
    - name: Test connection
      ping:

    - name: Update apt cache
      apt: update_cache=yes

    # TODO Fail2Ban

    # Papertrail
    # TODO: Restart remote_syslog
    - name: Copy Papertrail config
      copy:
        src: ./files/log_files.yml
        dest: /etc/log_files.yml
        owner: root
        group: root
        mode: 0644

    # NGINX
    - name: Install nginx
      apt:
        name: nginx
        state: present
    - name: Copy nginx config
      copy:
        src: ./files/nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: www-data
        group: www-data
        mode: 0644
    - name: Copy website config
      copy:
        src: ./files/website
        dest: /etc/nginx/sites-available/website
        owner: www-data
        group: www-data
        mode: 0644
    - name: Symlink website config
      file:
        src: /etc/nginx/sites-available/website
        dest: /etc/nginx/sites-enabled/website
        owner: www-data
        group: www-data
        state: link
    - name: Remove default config
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
    - name: Restart nginx
      service:
        name: nginx
        state: restarted

    # RabbitMQ
    - name: Install RabbitMQ
      apt:
        name: rabbitmq-server
        state: present
    - name: Start RabbitMQ
      service:
        name: rabbitmq-server
        state: started

    # Postgres
    - name: Install PostgreSQL
      apt: name={{ item }} state=installed
      with_items:
        - postgresql
        - postgresql-contrib
        - python3-psycopg2
        - libpq-dev
        - python3-dev
    - name: Setup app Postgres user
      become: true
      become_user: postgres
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_password}}"
    - name: Setup photos database
      become: true
      become_user: postgres
      postgresql_db:
        name: photos
        state: present
        owner: "{{ db_user }}"
        port: 5432
        lc_collate: en_US.UTF-8
        lc_ctype: en_US.UTF-8

    # Folder Structure
    - name: Root app folder
      file:
        state: directory
        path: /srv
        owner: root
        group: root
    - name: Django folder
      file:
        state: directory
        path: /srv/app
        owner: root
        group: root
    - name: Local storage folder
      file:
        state: directory
        path: /srv/photos
        owner: root
        group: root
    - name: Static files folder
      file:
        state: directory
        path: /srv/static
        owner: www-data
        group: www-data

    # Secrets
    # AWS Access Key
    - lineinfile:
        path: /etc/environment
        regexp: '^AWS_S3_ACCESS_KEY_ID'
        line: 'AWS_S3_ACCESS_KEY_ID="{{ aws_access_key_id }}"'
    # AWS Access Password
    - lineinfile:
        path: /etc/environment
        regexp: '^AWS_S3_SECRET_ACCESS_KEY'
        line: 'AWS_S3_SECRET_ACCESS_KEY="{{ aws_secret_access_key }}"'
    # Sentry ID
    - lineinfile:
        path: /etc/environment
        regexp: '^RAVEN_DSN'
        line: 'RAVEN_DSN="{{ raven_dsn }}"'
    # Django Secret Key
    - lineinfile:
        path: /etc/environment
        regexp: '^DJANGO_SECRET_KEY'
        line: 'DJANGO_SECRET_KEY="{{ django_secret_key }}"'
    # Postgres database user
    - lineinfile:
        path: /etc/environment
        regexp: '^DB_USER'
        line: 'DB_USER="{{ db_user }}"'
    # Postgres database password
    - lineinfile:
        path: /etc/environment
        regexp: '^DB_PASSWORD'
        line: 'DB_PASSWORD="{{ db_password }}"'
    # Django default settings
    - lineinfile:
        path: /etc/environment
        regexp: '^DJANGO_SETTINGS_MODULE'
        line: 'DJANGO_SETTINGS_MODULE="photos.settings"'

    # Django app
    - name: Install Django dependencies
      apt: name={{ item }} state=installed
      with_items:
        - python3-pip
        - python-virtualenv
    - name: Copy Python package requirements
      copy:
        src: ../photos/requirements/prod.txt
        dest: /srv/requirements.txt
        owner: root
        group: root
        mode: 0644
    - name: Create virtualenv and install Python packages
      pip:
        requirements: /srv/requirements.txt
        virtualenv: /srv/env
        virtualenv_python: python3.5

- hosts: pull-code
  remote_user: root
  tasks:
    - name: Test connection
      ping:
    - name: Clone repo
      git:
        repo: https://github.com/MattSegal/family-photos.git
        dest: /srv/repo
    - name: Stop Gunicorn
      shell: |
        pids="$(pgrep -x gunicorn)"
        if [[ "$pids" != "" ]]
        then
          printf "$pids" | xargs kill
        fi
    - name: Stop Celery
      shell: |
        pids=$(pgrep --full 'celery worker')
        if [[ "$pids" != "" ]]
        then
          printf "$pids" | xargs kill
        fi
    - name: Copy code
      shell: rm -rf /srv/app/ && cp -R /srv/repo/photos /srv/app
    - name: Make 'stop_gunicorn' script executable
      file:
          path: /srv/app/scripts/stop_gunicorn.sh
          mode: +x
    - name: Make 'start_gunicorn' script executable
      file:
          path: /srv/app/scripts/start_gunicorn.sh
          mode: +x
    - name: Make 'manage' script executable
      file:
          path: /srv/app/manage.py
          mode: +x
    - name: Start Gunicorn
      shell: /srv/app/scripts/start_gunicorn.sh prod
